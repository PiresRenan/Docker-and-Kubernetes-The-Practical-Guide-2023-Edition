Dockerize BOTH apps - the Python and the Node app.

1) Create appropriate images for both apps (two separate images!).
HINT: Have a brief look at the app code to configure your images correctly!

1. Configurar o Dockerfile propriamente.
2. docker build .
3. docker images

2) Launch a container for each created image, making sure, 
that the app inside the container works correctly and is usable.

Para o aplicativo node: 
 - docker run -p 3000:3000 <IMAGE ID>

Para o aplicativo python: 
 - docker run -it <IMAGE ID>

3) Re-create both containers and assign names to both containers.
Use these names to stop and restart both containers.

Para o aplicativo node:
 - docker run -p 3000:3000 --name nodeapp <IMAGE ID>
 - docker stop nodeapp

Para o aplicativo python:
 - docker run -it --name pythonapp <IMAGE ID>

4) Clean up (remove) all stopped (and running) containers, 
clean up all created images.

1. Parar todos os container e excluir seus containers.
 - docker ps  =  (verificar todos os containers em execução)
 - docker stop <NAME ou CONTAINER ID>  =  (para a execução do container)
 - docker ps -a  =  (lista todos os containers parados)
 - docker rm <CONTAINER ID ou NAME (pode conter mais de um por vez)>  =  (exclui um container específico)

2. Listar todas as images e deletar
 - docker images (lista todas as images)
 - docker rmi <IMAGE ID (pode conter multiplos)>

 optional - docker images prune
 optional - docker images prune -a

5) Re-build the images - this time with names and tags assigned to them.

 - docker build -t nodeapp:latest .
 - docker build -t bmi-app:v1 .

6) Run new containers based on the re-built images, ensuring that the containers
are removed automatically when stopped.

docker run -p 8000:3000 -d --name node-demo --rm nodeapp:latest
